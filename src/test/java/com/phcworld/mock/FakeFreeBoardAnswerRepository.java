package com.phcworld.mock;

import com.phcworld.answer.domain.FreeBoardAnswer;
import com.phcworld.answer.infrastructure.FreeBoardAnswerRepository;
import com.phcworld.exception.model.NotFoundException;
import com.phcworld.freeboard.domain.FreeBoard;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeFreeBoardAnswerRepository implements FreeBoardAnswerRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<FreeBoardAnswer> data = new ArrayList<>();
    @Override
    public FreeBoardAnswer save(FreeBoardAnswer freeBoardAnswer) {
        if(freeBoardAnswer.getId() == null || freeBoardAnswer.getId().equals(0L)){
            FreeBoardAnswer newFreeBoardAnswer = FreeBoardAnswer.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .freeBoard(freeBoardAnswer.getFreeBoard())
                    .contents(freeBoardAnswer.getContents())
                    .writer(freeBoardAnswer.getWriter())
                    .createDate(freeBoardAnswer.getCreateDate())
                    .updateDate(freeBoardAnswer.getUpdateDate())
                    .build();
            data.add(newFreeBoardAnswer);
            return newFreeBoardAnswer;
        } else {
            data.removeIf(a -> Objects.equals(a.getId(), freeBoardAnswer.getId()));
            data.add(freeBoardAnswer);
            return freeBoardAnswer;
        }
    }

    @Override
    public Optional<FreeBoardAnswer> findById(long id) {
        return data.stream()
                .filter(a -> a.getId().equals(id))
                .findAny();
    }

    @Override
    public void deleteById(long id) {
        data.removeIf(a -> Objects.equals(a.getId(), id));
    }

    @Override
    public Page<FreeBoardAnswer> findByFreeBoardId(long freeBoardId, Pageable pageable) {
        List<FreeBoardAnswer> list = data.stream()
                .filter(a -> a.getFreeBoard().getId().equals(freeBoardId))
                .skip(pageable.getPageNumber() * pageable.getPageSize())
                .limit(pageable.getPageSize())
                .collect(Collectors.toList());
        return new PageImpl<>(list);
    }

//    @Override
//    public Page<FreeBoardAnswer> findByFreeBoard(FreeBoard freeBoard, Pageable pageable) {
//        List<FreeBoardAnswer> list = data.stream()
//                .filter(a -> a.getFreeBoard().equals(freeBoard))
//                .skip(pageable.getPageNumber() * pageable.getPageSize())
//                .limit(pageable.getPageSize())
//                .collect(Collectors.toList());
//        return new PageImpl<>(list);
//    }

}
